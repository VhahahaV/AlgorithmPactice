/*
描述
    有一个6*6的棋盘，每个棋盘上都有一个数值，现在又一个起始位置和终止位置，请找出一个从起始位置到终止位置代价最小的路径：     1、只能沿上下左右四个方向移动     2、总代价是没走一步的代价之和     3、每步（从a,b到c,d）的代价是c,d上的值与其在a,b上的状态的乘积     4、初始状态为1     每走一步，状态按如下公式变化：（走这步的代价%4）+1。
输入描述：
    每组数据一开始为6*6的矩阵，矩阵的值为大于等于1小于等于10的值，然后四个整数表示起始坐标和终止坐标。
输出描述：
    输出最小代价。
*/

#include<iostream>

#include<vector>
#include<set>
using namespace std;

vector<vector<int>> value(6, vector<int>(6));
vector<vector<int>> maze(6, vector<int>(6));
int sx, sy, ex, ey;


void dfs(int i, int j, int last_i, int last_j, int status) {
    if (last_i == -1) {
        dfs(i, j + 1, i, j, 1);
        dfs(i - 1, j, i, j, 1);
        dfs(i + 1, j, i, j, 1);
        dfs(i, j - 1, i, j, 1);
        return;
    }
    if (i < 0 || i > 5 || j < 0 || j > 5 || (i == sx && j == sy))
        return ;
    int cur = status *  maze[i][j];
    if (value[i][j] && value[i][j] <= cur + value[last_i][last_j])
        return;
    value[i][j] = cur + value[last_i][last_j];
    int newStatus = cur % 4 + 1;
    dfs(i, j + 1, i, j, newStatus);
    dfs(i - 1, j, i, j, newStatus);
    dfs(i + 1, j, i, j, newStatus);
    dfs(i, j - 1, i, j, newStatus);
}

int main() {
    int n = 6;
    for (int i  = 0 ; i < n ; i ++) {
        for (int j = 0 ; j < n ; j++) {
            cin >> maze[i][j];
        }
    }
    cin >> sx >> sy >> ex >> ey;
    dfs(sx, sy, -1, -1, 1);
    cout << value[ex][ey];
    return 0;
}